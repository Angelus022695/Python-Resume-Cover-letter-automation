from docx import Document
import os
# === PLACEHOLDER VALUES ===
job_title = "[job title]"
company_name = "[Company Name]"
contact_title = "Title (Mr/Ms)"
last_name = "Last Name"
# === REPLACEMENT MAPPING ===
cover_replacements = {
'[[JOB_TITLE]]': job_title,
'"[[JOB_TITLE]]"': job_title,
'[[COMPANY_NAME]]': company_name,
'"[[COMPANY_NAME]]"': company_name,
'[[CONTACT_TITLE]]': contact_title,
'[[LAST_NAME]]': last_name
}
resume_replacements = {
'[[JOB_TITLE]]': job_title,
'[[COMPANY_NAME]]': company_name
}
# === COVER LETTER: MERGES SPLIT RUNS ===
def update_cover_letter(path):
doc = Document(path)
def replace_runs(runs):
full_text = ''.join(run.text for run in runs)
for old, new in cover_replacements.items():
full_text = full_text.replace(old, new)
if runs:
runs[0].text = full_text
for run in runs[1:]:
run.text = ''
for para in doc.paragraphs:
replace_runs(para.runs)
for table in doc.tables:
for row in table.rows:
for cell in row.cells:
for para in cell.paragraphs:
replace_runs(para.runs)
return doc
# === RESUME: REPLACES FULL PARAGRAPH TEXT BUT KEEPS FORMATTING CONSISTENT ===
def update_resume(path):
doc = Document(path)
def replace_placeholder_text(paragraph):
full_text = paragraph.text
replaced = False
for old, new in resume_replacements.items():
if old in full_text:
full_text = full_text.replace(old, new)
replaced = True
if replaced:
for i in range(len(paragraph.runs)):
paragraph.runs[i].text = ''
if paragraph.runs:
paragraph.runs[0].text = full_text
for para in doc.paragraphs:
replace_placeholder_text(para)
for table in doc.tables:
for row in table.rows:
for cell in row.cells:
for para in cell.paragraphs:
replace_placeholder_text(para)
return doc
# === SAVE UPDATED FILES ===
def save_updated_docs(cover_letter_path, resume_path):
